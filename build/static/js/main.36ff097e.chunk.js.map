{"version":3,"sources":["App.js","index.js"],"names":["SystemProgram","web3","Keypair","arr","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","sendGif","length","provider","getProvider","program","Program","rpc","addGif","accounts","user","wallet","getGifList","onInputChange","event","value","target","connection","Connection","Provider","createGifAccount","startStuffOff","systemProgram","programId","signers","RenderConnectedContainer","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","gifLink","endsWith","src","alt","userAddress","RenderNotConnectedContainer","useEffect","onLoad","addEventListener","removeEventListener","account","fetch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.36ff097e.chunk.js","sourcesContent":["import './App.css';\nimport { useEffect, useState } from 'react';\nimport idl from './idl.json';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport kp from './keypair.json'\n\nconst { SystemProgram, Keypair } = web3;\n\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = Keypair.fromSecretKey(secret)\nconst programID = new PublicKey(idl.metadata.address);\n\nconst network = clusterApiUrl('devnet');\n\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\n\nconst App = () => {\n\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log('Connected with Public Key:', response.publicKey.toString());\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const connectWallet = async () => {\n    const { solana } = window;\n    const response = await solana.connect();\n    console.log('Connected with Public Key:', response.publicKey.toString());\n    setWalletAddress(response.publicKey.toString());\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log('No gif link given!');\n    }\n    setInputValue('')\n    console.log('Gif link:', inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(program.rpc);\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n\n      console.log(\"GIF successfully sent to program\", inputValue);\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error);\n    }\n\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error)\n    }\n  }\n\n  const RenderConnectedContainer = () => {\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n            Do One-Time Initialization For Your Marvel Collection Account\n          </button>\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"connected-container\">\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendGif();\n            }}\n          >\n            <input type=\"text\" placeholder=\"Enter gif link!\" value={inputValue} onChange={onInputChange} />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">Submit</button>\n          </form>\n          <div className=\"gif-grid\">\n            {gifList.map((item, index) => {\n              console.log(gifList);\n              if (item.gifLink.endsWith(\"gif\")) {\n                return (\n                  <div className=\"gif-item\" key={index}>\n                    <img src={item.gifLink} alt={item.gifLink} />\n                    <p className=\"gif-address-title\">Public Address</p>\n                    <p className=\"gif-address\">{item.userAddress.toString()}</p>\n                  </div>)\n              } else {\n                return false;\n              }\n            })}\n          </div>\n        </div>\n      )\n    }\n  }\n  const RenderNotConnectedContainer = () => (\n    <button className=\"cta-button connect-wallet-button\" onClick={connectWallet}>\n      Connect to Wallet\n    </button>\n  )\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, [])\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error)\n      setGifList(null);\n    }\n  }\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [walletAddress])\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">ðŸ–¼ Marvel Gifs</p>\n          <p className=\"sub-text\">\n            View your Marvel GIF collection âœ¨\n          </p>\n          {!walletAddress && <RenderNotConnectedContainer />}\n          {walletAddress && <RenderConnectedContainer />}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}